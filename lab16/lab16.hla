// ASSIGNMENT NAME
//
// PROGRAMMER NAME
// DATE
program LabSixteen;

#include ("stdlib.hhf")

static
  input: int8;
  isPrime: boolean;

// Return (in al) a signed integer between min and max (inclusive).
//
// * The "breakif" logic has already been translated into low-level code.
procedure getInt8 (prompt: string; min: int8; max: int8);
begin getInt8;
  push(edx);
  push(ecx);
  push(ebx);

  // 1. Translate this FOREVER..ENDFOR loop into low-level code
  forever
    try
      stdout.put(prompt);
      stdin.flushInput();
      stdin.geti8();
      unprotected
        cmp((type int8 al), min);
        jl INT8_BAD;
        cmp((type int8 al), max);
        jg INT8_BAD;
        break;
        INT8_BAD:
        stdout.put("Please enter a number between", min, " and ", max, ".", nl, nl);
    anyexception
      stdout.put("Input is not a valid 8-bit signed integer.", nl, nl);
    endtry;
  endfor;

  pop(ebx);
  pop(ecx);
  pop(edx);
end getInt8;

begin LabSixteen;

  // 2. Translate this FOREVER..ENDFOR loop into low-level code
  forever

    console.cls();

    getInt8("Please enter an int8: ", -127, 127);
    mov(al, input);

    stdout.put(nl, "What do you want to do with your input value?", nl);
    stdout.put("1. Test to see if it is negative", nl);
    stdout.put("2. Test to see if it is even", nl);
    stdout.put("3. Reverse its sign", nl);
    stdout.put("4. Test to see if it is prime", nl);
    getInt8("your choice: ", 1, 4);

    console.cls();

    if (al == 1) then
      if (input < 0) then
        stdout.put(input, " is a negative value.", nl);
      else
        stdout.put(input, " is greater than or equal to zero.", nl);
      endif;
    elseif (al == 2) then
      mov(0, ah);
      mov(input, al);
      idiv(2, ax);
      if (ah == 0) then
        stdout.put(input, " is an even number.", nl);
      else
        stdout.put(input, " is an odd number.", nl);
      endif;
    elseif (al == 3) then
      mov(input, al);
      not(al);
      add(1, al);
      stdout.put(input, " sign reversed is ", (type int8 al), nl);
    else
      if (input < 0) then
        stdout.put("Reversing the sign.", nl, nl);
        mov(input, al);
        not(al);
        add(1, al);
        mov(al, input);
      endif;
      mov(true, isPrime);
      if (input < 2) then
        mov(false, isPrime);
      else
        mov(true, isPrime);

        // 3. Translate this FOR..ENDFOR loop into low-level code
        for (mov(2, cl); cl<input; inc(cl)) do
          mov(0, ah);
          mov(input, al);
          div(cl, ax);
          if (ah == 0) then
            mov(false, isPrime);
            break;
          endif;
        endfor;

      endif;

      if (isPrime == true) then
        stdout.put(input, " is a prime number.", nl);
      else
        stdout.put(input, " is not a prime number.", nl);
      endif;
    endif;

    stdout.put(nl, nl, "Go again (y/n)? ");
    stdin.flushInput();

    stdin.getc();
    cmp(chars.toUpper(al), 'N');
    jne GO_AGAIN_1;
      break;
    GO_AGAIN_1:
      console.cls();

  endfor;

  // 4. Translate this FOREVER..ENDFOR loop into low-level code
  forever
    console.cls();

    getInt8("Please enter a number between 1-20: ", 1, 20);
    mov(al, input);

    stdout.put(nl, "counting up...", nl);

    // 5. Translate this FOR..ENDFOR loop into low-level code
    for (mov(1, cl); cl<=input; inc(cl)) do
      stdout.put((type uns8 cl), " ");
    endfor;

    stdout.newln();

    stdout.put(nl, "counting down...", nl);
    mov(input, cl);

    // 6. Translate this WHILE..ENDWHILE loop into low-level code
    while (cl > 0) do
      stdout.put((type uns8 cl), " ");
      dec(cl);
    endwhile;

    stdout.newln();

    stdout.put(nl, nl, "Go again (y/n)? ");
    stdin.flushInput();

    stdin.getc();
    // NEED CODE HERE TO FORCE UPPER-CASE OF CHAR INPUT

    cmp(al, 'N');
    jne GO_AGAIN_2;
      break;
    GO_AGAIN_2:

  endfor;
    	
end LabSixteen;
