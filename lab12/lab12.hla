// ASSIGNMENT NAME
//
// PROGRAMMER NAME
// DATE
program LabTwelve;

#include ("stdlib.hhf");

static
  myChars: char[10] := 10 dup ['z'];
  myInts: int16[5] := [-2, -1, 0, 1, 2];
  myUns: uns32[3];

// Reads in and returns an alphanumeric character.
procedure getChar(prompt: string);
var
  input: char;
begin getChar;
  // these pushes are here because experience tells me
  // that the try..anyexception block my overwrite their values
  // and we do not want that
  push(ebx);
  push(ecx);

  forever

    stdout.put(prompt);
    try
      stdin.getc();
      unprotected
        stdin.flushInput();
        mov(al, input);
        breakif(chars.isAlphaNum(input)); // HLA standard library (chars.hhf)
        stdout.put("Please enter only alphanumeric characters.", nl, nl);
    anyexception
      stdout.put("Not a valid input.", nl, nl);
    endtry;

  endfor;

  mov(input, al); // return the input in al

  // pops to restore
  pop(ecx);
  pop(ebx);
end getChar;

// Reads in an int16 and returns a value between min and max.
procedure getInt16(prompt: string; min: int16; max: int16);
begin getInt16;
  // these pushes are here because experience tells me
  // that the try..anyexception block my overwrite their values
  // and we do not want that
  push(ebx);
  push(ecx);

  forever

    stdout.put(prompt);
    try
      stdin.geti16();
      unprotected
        stdin.flushInput();
        breakif((type int16 ax) >= min && (type int16 ax) <= max);
        stdout.put("Input is not between ", min, " and ", max, ".", nl, nl);
    anyexception
      stdout.put("Not a valid signed 16-bit integer.", nl, nl);
    endtry;

  endfor;

  // pops to restore
  pop(ecx);
  pop(ebx);
end getInt16;

// Reads in an uns32 and returns a value between min and max.
procedure getUns32(prompt: string; min: uns32; max: uns32);
begin getUns32;
  // these pushes are here because experience tells me
  // that the try..anyexception block my overwrite their values
  // and we do not want that
  push(ebx);
  push(ecx);

  forever

    stdout.put(prompt);
    try
      stdin.getu32();
      unprotected
        stdin.flushInput();
        breakif((type uns32 eax) >= min && (type uns32 eax) <= max);
        stdout.put("Input is not between ", min, " and ", max, ".", nl, nl);
    anyexception
      stdout.put("Not a valid unsigned 32-bit integer.", nl, nl);
    endtry;

  endfor;

  // pops to restore
  pop(ecx);
  pop(ebx);
end getUns32;

// Asks the user if they want to go again. "Returns" true in al
// if they answer yes, otherwise returns false in al.
procedure goAgain;
begin goAgain;

  stdout.put("Keep editing (y/n)? ");
  stdin.getc();
  stdin.flushInput();

  if (al == 'y' || al == 'Y') then
    mov(true, al);
  else
    mov(false, al);
  endif;

end goAgain;

// Print the contents of an array, on a single line, each element
// separated by a space.
//
// addr=base address, size=number of elements in array
// dtype=0 (char), dtype=1 (int16), dtype=2 (uns32)
procedure print(addr: dword; size: uns32; dtype: uns8);
begin print;

  pushad();

  // 1. Copy addr into ebx, so it can be used to compute an effective address

  for (mov(0, ecx); ecx < size; inc(ecx)) do
  	if (dtype == 0) then // char

      // (base=ebx, index=ecx, byte scale=1)
      stdout.put((type char [ebx + ecx * 1]));

  	elseif (dtype == 1) then // int16

      // 2. Output the int16 (base=ebx, index=ecx, byte scale=2)

  	elseif (dtype == 2) then // uns32

      // 3. Output the uns32 (base=ebx, index=ecx, byte scale=4)

  	endif;
  	stdout.put(" ");
  endfor;

  stdout.newln();

  popad();

end print;

// Edit a cell in an array -- value read from the keyboard.
//
// addr=base address, size=number of elements in array
// dtype=0 (char), dtype=1 (int16), dtype=2 (uns32)
procedure editCell(addr: dword; size: uns32; dtype: uns8);
begin editCell;

  pushad();

  mov(size, ecx);
  dec(ecx);
  getUns32("Enter index of item to edit: ", 0, ecx);
  mov(eax, ecx); // index to ecx

  // 4. Copy addr into ebx, so it can be used to compute an effective address

  if (dtype == 0) then // char
    getChar("Enter new character: ");
    mov(al, [ebx + ecx]);
  elseif (dtype == 1) then // int16

    // 5. Use getInt16 to get a new value (ax) then copy it into the int16 array

  elseif (dtype == 2) then // uns32

    // 6. Use getUns32 to get a new value (eax) then copy it into the uns32 array

  endif;

  popad();

end editCell;

// User interface for the user to edit the contents of an array until
// they choose to stop editing.
procedure editArray(addr: dword; size: uns32; dtype: uns8);
begin editArray;

  console.cls();

  forever

    // 7. Call print procedure, passing addr, size, dtype

    stdout.newln();

    // 8. Call editCell procedure, passing addr, size, dtype

    goAgain();
    breakif(al == false);
    console.cls();
  endfor;

end editArray;

begin LabTwelve;

  console.cls();

  print(&myChars, 10, 0);
  stdout.newln();
  print(&myInts, 5, 1);
  stdout.newln();
  print(&myUns, 3, 2);
  stdout.newln();

  editArray(&myChars, 10, 0);
  stdout.newln();
  editArray(&myInts, 5, 1);
  stdout.newln();

  // 9. Call editArray, passing address of myUns, size=3, dtype=2

  stdout.newln();

  // 10. Print all three arrays once more, to see the edited data

end LabTwelve;
