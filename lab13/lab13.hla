// ASSIGNMENT NAME
//
// PROGRAMMER NAME
// DATE
program LabThirteen;

#include ("stdlib.hhf");

static
  numbers: dword;
  size: uns32;

// Reads in an int16 and returns a value between min and max.
procedure getInt16(prompt: string; min: int16; max: int16);
begin getInt16;
  push(ebx);
  push(ecx);

  forever

    stdout.put(prompt);
    try
      stdin.geti16();
      unprotected
        stdin.flushInput();
        breakif((type int16 ax) >= min && (type int16 ax) <= max);
        stdout.put("Input is not between ", min, " and ", max, ".", nl, nl);
    anyexception
      stdout.put("Not a valid signed 16-bit integer.", nl, nl);
    endtry;

  endfor;

  pop(ecx);
  pop(ebx);
end getInt16;

// Reads in an uns32 and returns a value between min and max.
procedure getUns32(prompt: string; min: uns32; max: uns32);
begin getUns32;
  push(ebx);
  push(ecx);

  forever

    stdout.put(prompt);
    try
      stdin.getu32();
      unprotected
        stdin.flushInput();
        breakif((type uns32 eax) >= min && (type uns32 eax) <= max);
        stdout.put("Input is not between ", min, " and ", max, ".", nl, nl);
    anyexception
      stdout.put("Not a valid unsigned 32-bit integer.", nl, nl);
    endtry;

  endfor;

  pop(ecx);
  pop(ebx);
end getUns32;

// Asks the user if they want to go again, using a custom prompt.
// "Returns" true in al if they answer yes, otherwise returns false in al.
procedure goAgain(prompt: string);
begin goAgain;

  stdout.put(prompt);
  stdin.getc();
  stdin.flushInput();

  if (al == 'y' || al == 'Y') then
    mov(true, al);
  else
    mov(false, al);
  endif;

end goAgain;

// Print the contents of an array, on a single line, each element
// separated by a space.
//
// addr=base address, size=number of elements in array
procedure print(addr: dword; size: uns32);
begin print;

	pushad();

	mov(addr, ebx);

  // 1. Write a for loop that print all contents of the array, with
  //    a space in-between each value and a newline at the end

	popad();

end print;

// Edit a cell in an array -- value read from the keyboard.
//
// addr=base address, size=number of elements in array
procedure editCell(addr: dword; size: uns32);
begin editCell;

	pushad();

  mov(size, ecx);
  dec(ecx);
	getUns32("Enter index of item to edit: ", 0, ecx);
	mov(eax, ecx); // index to ecx

	mov(addr, ebx); // base address to ebx

	getInt16("Enter new value: ", -100, 100);
  mov(ax, [ebx + ecx * 2]);

	popad();

end editCell;

// User interface for the user to edit the contents of an array until
// they choose to stop editing.
procedure editArray(addr: dword; size: uns32);
begin editArray;

  forever
    print(addr, size);
    stdout.newln();
    editCell(addr, size);

    goAgain("Keep editing (y/n)? ");
    breakif(al == false);
    console.cls();
  endfor;

end editArray;

// Returns (in ax) the maximum value in the array.
//
// addr=base address, size=number of elements in array
procedure max(addr: dword; size: uns32);
begin max;
  push(ebx);
  push(ecx);

  // 2. Copy the addr parameter into ebx

  // 3. Copy the first value from the array into ax

  // 4. Use a for loop to look through values at indexes 1...size-1 to find
  //    any value larger than ax -- if found, copy that value into ax

  pop(ecx);
  pop(ebx);
end max;

procedure createArray;
begin createArray;

  pushad();

  getUns32("What size (number of elements) array do you want? ", 1, 10);
  mov(eax, size);

  // 5. Compute eax = @size(int16) * eax

  stdout.put("Allocating ", (type uns32 eax), " bytes", nl, nl);

  // 6. Allocate memory for the number of bytes computed in eax

  // 7. Copy the address/pointer returned by the memory allocation into
  //    "number" (the dword variable to be used to keep track of this
  //    address/pointer)

  popad();

end createArray;

procedure deleteArray;
begin deleteArray;

  stdout.put("Freeing the memory associated with your array", nl,nl);

  // 8. Free the memory that is "pointed to" by "numbers"

  mov(0, numbers); // this "nulls out" the pointer after it is freed

end deleteArray;

begin LabThirteen;

	console.cls();

  forever
    createArray();
    stdout.newln();

    stdout.newln();
    editArray(numbers, size);
    stdout.newln();
    print(numbers, size);
    stdout.newln();

    max(numbers, size);
    stdout.put("Max value: ", (type int16 ax), nl, nl);

    deleteArray();
    stdout.newln();

    goAgain("Create another array (y/n)? ");
    breakif(al == false);
    console.cls();
  endfor;

end LabThirteen;
